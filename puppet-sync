#!/usr/bin/env ruby
#
# Copyright 2010, Stefan Schlesinger <sts@ono.at>
#
#
# Puppet-Sync  
#
# This script may be used to sync a git branch from your repository
# to puppet master.
#
# Source code: http://www.github.com/sts/puppet-sync
# 
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 'fileutils'
require 'optparse'
require 'ostruct'
require 'tmpdir'

class PuppetSync

  class UpdateBranchDestinationDoesntExist < StandardError
  end

  class RemoveBranchDestinationDoesntExist < StandardError
  end

  VERSION = "1.2-pdxcat1"

  def initialize(arguments)
    @arguments = arguments

    @options = OpenStruct.new

    # Default Options
    @options.gitcmd = "/usr/bin/git"
    @options.verbose = false
    @options.passenger = false
    @options.deploy = "/etc/puppet/environments"

    # Ensure nothing unexpected happens because of environment variables
    ENV.delete('GIT_DIR')
  end

  def run
    if parsed_options? && arguments_valid?
      if @options.stdin
        self.run_stdin
      elsif @options.branch
        self.run_branch
      end
    else
      puts "---------------------------------------------------------------- Puppet-Sync"
      puts " ERROR: Invalid options set for puppet-sync."
      puts "----------------------------------------------------------------------------"
    end
  end

  def run_branch
    puts "----------------------------------------------------------------- Puppet-Sync"
    puts " Branch      : #{@options.branch}"
    puts " Destination : #{@options.puppetmaster}:#{@options.deploy}"
    puts " Repository  : #{@options.repository}"
    puts "-----------------------------------------------------------------------------\n"

    begin
      if @options.remove
        self.remove_branch(@options.branch)
      else
        self.update_branch(@options.branch)
      end
    rescue UpdateBranchDestinationDoesntExist
      self.sync_branch(@options.branch)
    rescue RemoveBranchDestinationDoesntExist
      puts "ERROR: cannot remove branch from #{deployment_directory(@options.branch)}; does not exist."
    end

    self.finalize
  end

  def run_stdin
    STDIN.each_line do |line|
      oldrev, newrev, refname = line.split(" ")

      branch = refname.sub(%r{^refs/heads/(.*$)}) { $1 }
      if branch =~ /[\W-]/
        puts %Q{Branch "#{branch}" contains non-word characters, ignoring it.}
        next
      end

      begin
        if newrev.match(/^0+$/)
          self.remove_branch(branch)
        else
          self.update_branch(branch)
        end
      rescue UpdateBranchDestinationDoesntExist
        self.sync_branch(branch)
      rescue RemoveBranchDestinationDoesntExist
        puts "ERROR: cannot remove branch from #{deployment_directory(branch)}; does not exist."
      end

    end
  end

  def execute(cmd)
    puts "Executing: #{cmd}" if @options.verbose
    %x{#{cmd}}
  end

  def sync_branch(branch)
    puts "running sync_branch" if @options.verbose

    deploy = deployment_directory(branch)

    if File.directory?(deploy)
      unless File.writable?(deploy)
        raise "ERROR: Environment directory is not writeable."
      end

      if File.exists?("#{deploy}/.puppet-sync-stamp")
        FileUtils.remove_dir(deploy)
      else
        raise "ERROR: Environment directory is not a copy managed by puppet-sync in: #{deploy}. Try to remove it manually."
      end
    end

    execute("#{git(:clone)} #{@options.repository} #{deploy} -b #{branch}")

    Dir.chdir(deploy) do
      execute("#{git(:checkout)} origin/#{branch}")
      execute("#{git(:submodule)} update --init --recursive")

      # configure a username and email address - some git cmd might fail otherwise
      execute("#{git(:config)} --add user.name 'Puppet-Sync-Script'")
      execute("#{git(:config)} --add user.email '#{@options.login}@#{@options.puppetmaster}'")

      # mark the repository as managed by PuppetSync
      execute("touch .puppet-sync-stamp")

    end
  end

  def update_branch(branch)
    puts "running update_branch" if @options.verbose

    deploy = deployment_directory(branch)

    unless File.exists?("#{deploy}/.puppet-sync-stamp")
      raise UpdateBranchDestinationDoesntExist, "Cannot update branch."
    end

    Dir.chdir(deploy) do
      execute("#{git(:fetch)} origin")
      execute("#{git(:reset)} --hard")
      execute("#{git(:checkout)} origin/#{branch}")
      execute("#{git(:submodule)} update --init --recursive")
      execute("#{git(:clean)} -d -x -f")
      execute("touch .puppet-sync-stamp")
    end
  end

  def remove_branch(branch)
    puts "running remove_branch" if @options.verbose
    deploy = deployment_directory(branch)
    if File.exists?("#{deploy}/.puppet-sync-stamp")
      FileUtils.remove_dir(deploy)
      puts "#{deploy} removed." if @options.verbose
    else
      raise RemoveBranchDestinationDoesntExist, "Cannot remove branch."
    end
  end

  def git(command)
    @gitverbose ||= @options.verbose ? '--quiet' : ''
    case command.to_sym
    when :config
      %Q{git #{command.to_s}}
    else  
      %Q{git #{command.to_s} #{@gitverbose} }
    end
  end

  def finalize
    # nothing to see here
  end

  #
  # deployment_directory
  #
  # Magic hook to deploy a branch to a different directory.
  #
  # @return [string] - The name of the directory to create.
  #
  def deployment_directory(branch)
    if branch == "master"
      return "#{@options.deploy}/production"
    else
      return "#{@options.deploy}/#{branch}"
    end
  end


  def parsed_options?
    opts = OptionParser.new

    opts.banner = "Usage: puppet-sync -b BRANCH [options]"

    opts.on('-b', '--branch BRANCH', 'Mandatory, specify the git branch to clone.') do |branch|
      @options.branch = branch
      raise "ERROR: --branch and --stdin are incompatible arguments." if @options.stdin
    end

    opts.on('-s', '--stdin', 'Retrieve branch and revision information from stdin.') do
      @options.stdin = true
      raise "ERROR: --branch and --stdin are incompatible arguments." if @options.branch
    end

    opts.on('-p', '--puppetmaster HOST', 'Specify the host to deploy to.') do |host|
      @options.puppetmaster = host
    end

    opts.on('-d', '--deploy DIR', 'Specify the directory to deploy to.') do |deploy|
      @options.deploy = deploy
    end

    opts.on('-D', '--delete', 'Remove the specified branch from the deployment directory.') do
      @options.remove = true
    end

    opts.on('-r', '--repository URL', 'Git url for the repository.') do |repo|
      @options.repository = repo
    end

    opts.on('-i', '--identity FILE', 'Identity file (key) for connecting to the puppetmaster.') do |identity|
      @options.identity = identity
    end

    opts.on('-l', '--login USER', 'Git url for the repository.') do |login|
      @options.login = login
    end

    opts.separator "Common options:"
    opts.on('-V', '--version', 'Display the script version.') { output_version ; exit 0; }
    opts.on('-v', '--verbose', 'Be more verbose.') { @options.verbose = true }
    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end

    opts.parse!(@arguments) rescue return false
    true
  end

  def arguments_valid?
    return false unless (@options.branch or @options.stdin) and @options.repository
    true
  end

  def output_version
    puts VERSION
  end

end

app = PuppetSync.new(ARGV)
app.run
